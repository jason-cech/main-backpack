package org.sizzle.dd.phb.window;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.util.Collection;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.ServiceProvider;
import org.sizzle.dd.core.Avatar;
import org.sizzle.dd.core.AvatarClass;
import org.sizzle.dd.core.properties.ClassProperty;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
				dtd = "-//org.sizzle.dd.phb.window//ClassChooser//EN",
				autostore = false)
@TopComponent.Description(
				preferredID = "ClassChooserTopComponent",
				//iconBase="SET/PATH/TO/ICON/HERE", 
				persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.sizzle.dd.phb.window.ClassChooserTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
				displayName = "#CTL_ClassChooserAction",
				preferredID = "ClassChooserTopComponent")
@Messages({
	"CTL_ClassChooserAction=ClassChooser",
	"CTL_ClassChooserTopComponent=ClassChooser Window",
	"HINT_ClassChooserTopComponent=This is a ClassChooser window"
})
public final class ClassChooserTopComponent extends TopComponent {

	private Avatar avatar;

	public ClassChooserTopComponent() {
		initComponents();
		setName(Bundle.CTL_ClassChooserTopComponent());
		setToolTipText(Bundle.HINT_ClassChooserTopComponent());

	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jComboBox1 = new javax.swing.JComboBox<AvatarClass>();

    jComboBox1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jComboBox1ItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(267, Short.MAX_VALUE)
        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(269, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
		if (ItemEvent.SELECTED == evt.getStateChange()) {
			Object avatarClass = evt.getItem();
			if (null != avatar && avatarClass instanceof AvatarClass) {
				avatar.find(ClassProperty.class).setValue(AvatarClass.class.cast(avatarClass));
			}
		}
  }//GEN-LAST:event_jComboBox1ItemStateChanged
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox<AvatarClass> jComboBox1;
  // End of variables declaration//GEN-END:variables

	@Override
	public void componentOpened() {
		avatar = Lookup.getDefault().lookup(Avatar.class);

		Collection<? extends AvatarClass> avatarClasses = Lookup.getDefault().lookupAll(AvatarClass.class);
		AvatarClass[] avatarClassArray = new AvatarClass[avatarClasses.size()];
		avatarClassArray = avatarClasses.toArray(avatarClassArray);
		ComboBoxModel<AvatarClass> avatarClassComboBoxModel = new DefaultComboBoxModel<AvatarClass>(avatarClassArray);
		jComboBox1.setModel(avatarClassComboBoxModel);
		jComboBox1.setSelectedItem(
						null == avatar.findValueOf(ClassProperty.class)
						? new SelectClass()
						: avatar.findValueOf(ClassProperty.class));
		jComboBox1.setRenderer(new DefaultListCellRenderer() {
			@Override
			public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
				Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus); //To change body of generated methods, choose Tools | Templates.
				if (null != value) {
					JLabel.class.cast(c).setText(AvatarClass.class.cast(value).getClassName());
				}
				return c;
			}
		});
	}

	@Override
	public void componentClosed() {
		avatar = null;
		
		// Remove Any Listeners or Observers
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
	}

	@ServiceProvider(service = AvatarClass.class)
	public static class SelectClass implements AvatarClass {

		@Override
		public void configure(Avatar avatar) {
		}

		@Override
		public String getClassName() {
			return "Select A Class";
		}

		@Override
		public void deconfigure(Avatar avatar) {
		}

		@Override
		public String[] getKeyAbilities() {
			return new String[]{};
		}
	}
}
