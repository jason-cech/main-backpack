package org.sizzle.dd.core.ui.windows;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.JPopupMenu;
import javax.swing.text.JTextComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.sizzle.dd.core.Avatar;
import org.sizzle.dd.core.properties.AbilityModifierProperty;
import org.sizzle.dd.core.properties.AbilityScoreProperty;
import org.sizzle.dd.core.properties.CoreProperty;
import org.sizzle.rpg.core.AbstractAvatar;
import org.sizzle.rpg.core.AbstractProperty;
import org.sizzle.rpg.core.IProperty;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.sizzle.dd.core.ui.windows//Abilities//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "AbilitiesTopComponent",
        iconBase = "org/sizzle/dd/core/ui/windows/ruler.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.sizzle.dd.core.ui.windows.AbilitiesTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AbilitiesAction",
        preferredID = "AbilitiesTopComponent")
@Messages({
    "CTL_AbilitiesAction=Abilities",
    "CTL_AbilitiesTopComponent=Abilities Window",
    "HINT_AbilitiesTopComponent=This is a Abilities window"
})
public final class AbilitiesTopComponent extends TopComponent implements LookupListener, Observer {

    private Lookup.Result<AbstractAvatar> avatarResult = null;
    private Lookup.Result<AbilityScoreProperty> abilityScoreResult = null;
    private Lookup.Result<AbilityModifierProperty> abilityModifierResult = null;
    private Avatar avatar;

    public AbilitiesTopComponent() {
        initComponents();
        setName(Bundle.CTL_AbilitiesTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        txtStrScore = new javax.swing.JTextField();
        txtConScore = new javax.swing.JTextField();
        txtDexScore = new javax.swing.JTextField();
        txtIntScore = new javax.swing.JTextField();
        txtWisScore = new javax.swing.JTextField();
        txtChaScore = new javax.swing.JTextField();
        txtStrMod = new javax.swing.JTextField();
        txtConMod = new javax.swing.JTextField();
        txtDexMod = new javax.swing.JTextField();
        txtIntMod = new javax.swing.JTextField();
        txtWisMod = new javax.swing.JTextField();
        txtChaMod = new javax.swing.JTextField();
        pnlStrInfo = new javax.swing.JPanel();
        lblStrAbbr = new javax.swing.JLabel();
        lblStrTitle = new javax.swing.JLabel();
        pnlConInfo = new javax.swing.JPanel();
        lblConAbbr = new javax.swing.JLabel();
        lblConTitle = new javax.swing.JLabel();
        pnlDexInfo = new javax.swing.JPanel();
        lblDexAbbr = new javax.swing.JLabel();
        lblDexTitle = new javax.swing.JLabel();
        pnlIntInfo = new javax.swing.JPanel();
        lblIntAbbr = new javax.swing.JLabel();
        lblIntTitle = new javax.swing.JLabel();
        pnlWisInfo = new javax.swing.JPanel();
        lblWisAbbr = new javax.swing.JLabel();
        lblWisTitle = new javax.swing.JLabel();
        pnlChaInfo = new javax.swing.JPanel();
        lblChaAbbr = new javax.swing.JLabel();
        lblChaTitle = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 5), new java.awt.Dimension(0, 5), new java.awt.Dimension(32767, 5));

        setMinimumSize(new java.awt.Dimension(243, 246));
        setLayout(new java.awt.GridBagLayout());

        txtStrScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtStrScore.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtStrScore.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtStrScore.text")); // NOI18N
        txtStrScore.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)))));
        txtStrScore.setMargin(new java.awt.Insets(5, 5, 5, 5));
        txtStrScore.setPreferredSize(new java.awt.Dimension(30, 26));
        txtStrScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStrScoreActionPerformed(evt);
            }
        });
        txtStrScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStrScoreFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 6;
        add(txtStrScore, gridBagConstraints);

        txtConScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtConScore.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtConScore.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtConScore.text")); // NOI18N
        txtConScore.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        txtConScore.setMargin(new java.awt.Insets(5, 5, 5, 5));
        txtConScore.setPreferredSize(new java.awt.Dimension(30, 26));
        txtConScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConScoreActionPerformed(evt);
            }
        });
        txtConScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtConScoreFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 6;
        add(txtConScore, gridBagConstraints);

        txtDexScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDexScore.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDexScore.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtDexScore.text")); // NOI18N
        txtDexScore.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        txtDexScore.setPreferredSize(new java.awt.Dimension(30, 26));
        txtDexScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDexScoreActionPerformed(evt);
            }
        });
        txtDexScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDexScoreFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 6;
        add(txtDexScore, gridBagConstraints);

        txtIntScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtIntScore.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIntScore.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtIntScore.text")); // NOI18N
        txtIntScore.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        txtIntScore.setPreferredSize(new java.awt.Dimension(30, 26));
        txtIntScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIntScoreActionPerformed(evt);
            }
        });
        txtIntScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIntScoreFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 6;
        add(txtIntScore, gridBagConstraints);

        txtWisScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtWisScore.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtWisScore.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtWisScore.text")); // NOI18N
        txtWisScore.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        txtWisScore.setPreferredSize(new java.awt.Dimension(30, 26));
        txtWisScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWisScoreActionPerformed(evt);
            }
        });
        txtWisScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWisScoreFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 6;
        add(txtWisScore, gridBagConstraints);

        txtChaScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtChaScore.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtChaScore.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtChaScore.text")); // NOI18N
        txtChaScore.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        txtChaScore.setPreferredSize(new java.awt.Dimension(30, 26));
        txtChaScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtChaScoreActionPerformed(evt);
            }
        });
        txtChaScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChaScoreFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 6;
        add(txtChaScore, gridBagConstraints);

        txtStrMod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtStrMod.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtStrMod.text")); // NOI18N
        txtStrMod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtStrMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStrModActionPerformed(evt);
            }
        });
        txtStrMod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStrModFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, -1, 0, 2);
        add(txtStrMod, gridBagConstraints);

        txtConMod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtConMod.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtConMod.text")); // NOI18N
        txtConMod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtConMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConModActionPerformed(evt);
            }
        });
        txtConMod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtConModFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, -1, 0, 2);
        add(txtConMod, gridBagConstraints);

        txtDexMod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDexMod.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtDexMod.text")); // NOI18N
        txtDexMod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtDexMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDexModActionPerformed(evt);
            }
        });
        txtDexMod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDexModFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, -1, 0, 2);
        add(txtDexMod, gridBagConstraints);

        txtIntMod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIntMod.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtIntMod.text")); // NOI18N
        txtIntMod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtIntMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIntModActionPerformed(evt);
            }
        });
        txtIntMod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIntModFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, -1, 0, 2);
        add(txtIntMod, gridBagConstraints);

        txtWisMod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtWisMod.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtWisMod.text")); // NOI18N
        txtWisMod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtWisMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWisModActionPerformed(evt);
            }
        });
        txtWisMod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWisModFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, -1, 0, 2);
        add(txtWisMod, gridBagConstraints);

        txtChaMod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtChaMod.setText(org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.txtChaMod.text")); // NOI18N
        txtChaMod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtChaMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtChaModActionPerformed(evt);
            }
        });
        txtChaMod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChaModFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, -1, 0, 2);
        add(txtChaMod, gridBagConstraints);

        pnlStrInfo.setBackground(new java.awt.Color(160, 160, 160));
        pnlStrInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlStrInfo.setLayout(new java.awt.GridBagLayout());

        lblStrAbbr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lblStrAbbr, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblStrAbbr.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        pnlStrInfo.add(lblStrAbbr, gridBagConstraints);

        lblStrTitle.setBackground(new java.awt.Color(153, 153, 153));
        org.openide.awt.Mnemonics.setLocalizedText(lblStrTitle, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblStrTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        pnlStrInfo.add(lblStrTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, -1);
        add(pnlStrInfo, gridBagConstraints);

        pnlConInfo.setBackground(new java.awt.Color(160, 160, 160));
        pnlConInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlConInfo.setLayout(new java.awt.GridBagLayout());

        lblConAbbr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lblConAbbr, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblConAbbr.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        pnlConInfo.add(lblConAbbr, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblConTitle, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblConTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        pnlConInfo.add(lblConTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, -1);
        add(pnlConInfo, gridBagConstraints);

        pnlDexInfo.setBackground(new java.awt.Color(160, 160, 160));
        pnlDexInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlDexInfo.setLayout(new java.awt.GridBagLayout());

        lblDexAbbr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lblDexAbbr, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblDexAbbr.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        pnlDexInfo.add(lblDexAbbr, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblDexTitle, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblDexTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        pnlDexInfo.add(lblDexTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, -1);
        add(pnlDexInfo, gridBagConstraints);

        pnlIntInfo.setBackground(new java.awt.Color(160, 160, 160));
        pnlIntInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlIntInfo.setLayout(new java.awt.GridBagLayout());

        lblIntAbbr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lblIntAbbr, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblIntAbbr.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        pnlIntInfo.add(lblIntAbbr, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblIntTitle, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblIntTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        pnlIntInfo.add(lblIntTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, -1);
        add(pnlIntInfo, gridBagConstraints);

        pnlWisInfo.setBackground(new java.awt.Color(160, 160, 160));
        pnlWisInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlWisInfo.setLayout(new java.awt.GridBagLayout());

        lblWisAbbr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lblWisAbbr, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblWisAbbr.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        pnlWisInfo.add(lblWisAbbr, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblWisTitle, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblWisTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        pnlWisInfo.add(lblWisTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, -1);
        add(pnlWisInfo, gridBagConstraints);

        pnlChaInfo.setBackground(new java.awt.Color(160, 160, 160));
        pnlChaInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlChaInfo.setLayout(new java.awt.GridBagLayout());

        lblChaAbbr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(lblChaAbbr, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblChaAbbr.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        pnlChaInfo.add(lblChaAbbr, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblChaTitle, org.openide.util.NbBundle.getMessage(AbilitiesTopComponent.class, "AbilitiesTopComponent.lblChaTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        pnlChaInfo.add(lblChaTitle, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, -1);
        add(pnlChaInfo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        add(filler5, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void txtStrModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStrModActionPerformed
        userSetAbilityProperty(txtStrMod, AbilityModifierProperty.SLUG.STRENGTH_MODIFIER);
    }//GEN-LAST:event_txtStrModActionPerformed

    private void txtDexScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDexScoreActionPerformed
        userSetAbilityProperty(txtDexScore, AbilityScoreProperty.SLUG.DEXTERITY_SCORE);
    }//GEN-LAST:event_txtDexScoreActionPerformed

    private void txtIntModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIntModActionPerformed
        userSetAbilityProperty(txtIntMod, AbilityModifierProperty.SLUG.INTELLIGENCE_MODIFIER);
    }//GEN-LAST:event_txtIntModActionPerformed

    private void txtStrScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStrScoreActionPerformed
        userSetAbilityProperty(txtStrScore, AbilityScoreProperty.SLUG.STRENGTH_SCORE);
    }//GEN-LAST:event_txtStrScoreActionPerformed

    private void txtConScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConScoreActionPerformed
        userSetAbilityProperty(txtConScore, AbilityScoreProperty.SLUG.CONSTITUTION_SCORE);
    }//GEN-LAST:event_txtConScoreActionPerformed

    private void txtStrScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStrScoreFocusLost
        fieldFocusLoss(txtStrScore, AbilityScoreProperty.SLUG.STRENGTH_SCORE);
    }//GEN-LAST:event_txtStrScoreFocusLost

    private void txtStrModFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStrModFocusLost
        fieldFocusLoss(txtStrMod, AbilityModifierProperty.SLUG.STRENGTH_MODIFIER);
    }//GEN-LAST:event_txtStrModFocusLost

    private void txtConScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtConScoreFocusLost
        fieldFocusLoss(txtConScore, AbilityScoreProperty.SLUG.CONSTITUTION_SCORE);
    }//GEN-LAST:event_txtConScoreFocusLost

    private void txtConModFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtConModFocusLost
        fieldFocusLoss(txtConMod, AbilityModifierProperty.SLUG.CONSTITUTION_MODIFIER);
    }//GEN-LAST:event_txtConModFocusLost

    private void txtDexScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDexScoreFocusLost
        fieldFocusLoss(txtDexScore, AbilityScoreProperty.SLUG.DEXTERITY_SCORE);
    }//GEN-LAST:event_txtDexScoreFocusLost

    private void txtDexModFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDexModFocusLost
        fieldFocusLoss(txtDexMod, AbilityModifierProperty.SLUG.DEXTERITY_MODIFIER);
    }//GEN-LAST:event_txtDexModFocusLost

    private void txtIntScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIntScoreFocusLost
        fieldFocusLoss(txtIntScore, AbilityScoreProperty.SLUG.INTELLIGENCE_SCORE);
    }//GEN-LAST:event_txtIntScoreFocusLost

    private void txtIntModFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIntModFocusLost
        fieldFocusLoss(txtIntMod, AbilityModifierProperty.SLUG.INTELLIGENCE_MODIFIER);
    }//GEN-LAST:event_txtIntModFocusLost

    private void txtWisScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWisScoreFocusLost
        fieldFocusLoss(txtWisScore, AbilityScoreProperty.SLUG.WISDOM_SCORE);
    }//GEN-LAST:event_txtWisScoreFocusLost

    private void txtWisModFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWisModFocusLost
        fieldFocusLoss(txtWisMod, AbilityModifierProperty.SLUG.WISDOM_MODIFIER);
    }//GEN-LAST:event_txtWisModFocusLost

    private void txtChaScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChaScoreFocusLost
        fieldFocusLoss(txtChaScore, AbilityScoreProperty.SLUG.CHARISMA_SCORE);
    }//GEN-LAST:event_txtChaScoreFocusLost

    private void txtChaModFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChaModFocusLost
        fieldFocusLoss(txtChaMod, AbilityModifierProperty.SLUG.CHARISMA_MODIFIER);
    }//GEN-LAST:event_txtChaModFocusLost

    private void txtConModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConModActionPerformed
        userSetAbilityProperty(txtConMod, AbilityModifierProperty.SLUG.CONSTITUTION_MODIFIER);
    }//GEN-LAST:event_txtConModActionPerformed

    private void txtDexModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDexModActionPerformed
        userSetAbilityProperty(txtDexMod, AbilityModifierProperty.SLUG.DEXTERITY_MODIFIER);
    }//GEN-LAST:event_txtDexModActionPerformed

    private void txtIntScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIntScoreActionPerformed
        userSetAbilityProperty(txtIntScore, AbilityScoreProperty.SLUG.INTELLIGENCE_SCORE);
    }//GEN-LAST:event_txtIntScoreActionPerformed

    private void txtWisScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWisScoreActionPerformed
        userSetAbilityProperty(txtWisScore, AbilityScoreProperty.SLUG.WISDOM_SCORE);
    }//GEN-LAST:event_txtWisScoreActionPerformed

    private void txtWisModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWisModActionPerformed
        userSetAbilityProperty(txtWisMod, AbilityModifierProperty.SLUG.WISDOM_MODIFIER);
    }//GEN-LAST:event_txtWisModActionPerformed

    private void txtChaScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtChaScoreActionPerformed
        userSetAbilityProperty(txtChaScore, AbilityScoreProperty.SLUG.CHARISMA_SCORE);
    }//GEN-LAST:event_txtChaScoreActionPerformed

    private void txtChaModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtChaModActionPerformed
        userSetAbilityProperty(txtChaMod, AbilityModifierProperty.SLUG.CHARISMA_MODIFIER);
    }//GEN-LAST:event_txtChaModActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JLabel lblChaAbbr;
    private javax.swing.JLabel lblChaTitle;
    private javax.swing.JLabel lblConAbbr;
    private javax.swing.JLabel lblConTitle;
    private javax.swing.JLabel lblDexAbbr;
    private javax.swing.JLabel lblDexTitle;
    private javax.swing.JLabel lblIntAbbr;
    private javax.swing.JLabel lblIntTitle;
    private javax.swing.JLabel lblStrAbbr;
    private javax.swing.JLabel lblStrTitle;
    private javax.swing.JLabel lblWisAbbr;
    private javax.swing.JLabel lblWisTitle;
    private javax.swing.JPanel pnlChaInfo;
    private javax.swing.JPanel pnlConInfo;
    private javax.swing.JPanel pnlDexInfo;
    private javax.swing.JPanel pnlIntInfo;
    private javax.swing.JPanel pnlStrInfo;
    private javax.swing.JPanel pnlWisInfo;
    private javax.swing.JTextField txtChaMod;
    private javax.swing.JTextField txtChaScore;
    private javax.swing.JTextField txtConMod;
    private javax.swing.JTextField txtConScore;
    private javax.swing.JTextField txtDexMod;
    private javax.swing.JTextField txtDexScore;
    private javax.swing.JTextField txtIntMod;
    private javax.swing.JTextField txtIntScore;
    private javax.swing.JTextField txtStrMod;
    private javax.swing.JTextField txtStrScore;
    private javax.swing.JTextField txtWisMod;
    private javax.swing.JTextField txtWisScore;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        avatarResult = Lookup.getDefault().lookupResult(AbstractAvatar.class);
        avatarResult.addLookupListener(this);
        LookupEvent initialLookupEventOnComponentOpen = new LookupEvent(avatarResult);
        resultChanged(initialLookupEventOnComponentOpen);
    }

    @Override
    public void componentClosed() {
        avatarResult.removeLookupListener(this);
        avatarResult = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Object src = ev.getSource();

        if (src.getClass().isAssignableFrom(avatarResult.getClass())) {
            // avatar has changed, so we must update our property Lookup.Results
            @SuppressWarnings("unchecked")
            Lookup.Result<Avatar> r = (Lookup.Result<Avatar>) ev.getSource();
            Iterator<? extends Avatar> avatarIterator = r.allInstances().iterator();
            avatar = avatarIterator.hasNext() ? avatarIterator.next() : null;

            resetAbilityResults(avatar);
            if(avatar!=null) connectListeners(avatar);
        } else if (src.getClass().isAssignableFrom(CoreProperty.class)) {
            // a property has changed! quick update the value
        }
    }

    private void updateAbilityProperty(final IProperty<Integer> property, JTextComponent component) {
        if (property.isUserSet()) {
            JPopupMenu pop = new JPopupMenu();
            pop.add(new AbstractAction("Clear User Value") {
                @Override
                public void actionPerformed(ActionEvent e) {
                    ((AbstractProperty<Integer>) property).unsetValue();
                }
            });
            component.setComponentPopupMenu(pop);
            component.setBackground(Color.GREEN);
        } else {
            component.setComponentPopupMenu(null);
            component.setBackground(Color.WHITE);
        }
        component.setText(property.getValue().toString());
    }

    private void resetAbilityResults(Avatar avatar) {
        if (abilityScoreResult != null) {
            abilityScoreResult.removeLookupListener(this);// avatar has changed, we no longer want to listen to IT'S scores
        }
        if (abilityModifierResult != null) {
            abilityModifierResult.removeLookupListener(this);
        }

        if (null == avatar) {
            abilityScoreResult = null;
            abilityModifierResult = null;
            setFieldText("?");
            setFieldsEnabled(false);
        } else {
            abilityScoreResult = avatar.getLookup().lookupResult(AbilityScoreProperty.class);
            abilityScoreResult.addLookupListener(this);
            abilityModifierResult = avatar.getLookup().lookupResult(AbilityModifierProperty.class);
            abilityModifierResult.addLookupListener(this);
            JTextComponent field;
            for (AbilityScoreProperty abilityScoreProperty : abilityScoreResult.allInstances()) {
                if      (abilityScoreProperty.hasAlias(AbilityScoreProperty.SLUG.STRENGTH_SCORE))       field = txtStrScore;
                else if (abilityScoreProperty.hasAlias(AbilityScoreProperty.SLUG.CONSTITUTION_SCORE))   field = txtConScore;
                else if (abilityScoreProperty.hasAlias(AbilityScoreProperty.SLUG.DEXTERITY_SCORE))      field = txtDexScore;
                else if (abilityScoreProperty.hasAlias(AbilityScoreProperty.SLUG.INTELLIGENCE_SCORE))   field = txtIntScore;
                else if (abilityScoreProperty.hasAlias(AbilityScoreProperty.SLUG.WISDOM_SCORE))         field = txtWisScore;
                else if (abilityScoreProperty.hasAlias(AbilityScoreProperty.SLUG.CHARISMA_SCORE))       field = txtChaScore;
                else
                    field = null;

                if (field!=null) updateAbilityProperty(abilityScoreProperty, field);
            }

            for (AbilityModifierProperty abilityModifierProperty : abilityModifierResult.allInstances()) {
                switch(abilityModifierProperty.aliases.iterator().next()) {
                    case AbilityModifierProperty.SLUG.STRENGTH_MODIFIER: field = txtStrMod; break;
                    case AbilityModifierProperty.SLUG.CONSTITUTION_MODIFIER: field = txtConMod; break;
                    case AbilityModifierProperty.SLUG.DEXTERITY_MODIFIER: field = txtDexMod; break;
                    case AbilityModifierProperty.SLUG.INTELLIGENCE_MODIFIER: field = txtIntMod; break;
                    case AbilityModifierProperty.SLUG.WISDOM_MODIFIER: field = txtWisMod; break;
                    case AbilityModifierProperty.SLUG.CHARISMA_MODIFIER: field = txtChaMod; break;
                    default: field = null;
                }
                if (field!=null) updateAbilityProperty(abilityModifierProperty, field);
            }
        }
    }

    private void connectListeners(Avatar avatar) {
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityScoreProperty.SLUG.STRENGTH_SCORE)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityScoreProperty.SLUG.CONSTITUTION_SCORE)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityScoreProperty.SLUG.DEXTERITY_SCORE)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityScoreProperty.SLUG.INTELLIGENCE_SCORE)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityScoreProperty.SLUG.WISDOM_SCORE)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityScoreProperty.SLUG.CHARISMA_SCORE)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityModifierProperty.SLUG.STRENGTH_MODIFIER)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityModifierProperty.SLUG.CONSTITUTION_MODIFIER)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityModifierProperty.SLUG.DEXTERITY_MODIFIER)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityModifierProperty.SLUG.INTELLIGENCE_MODIFIER)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityModifierProperty.SLUG.WISDOM_MODIFIER)).addObserver(this);
        ((AbstractProperty<Integer>) avatar.<Integer>find(AbilityModifierProperty.SLUG.CHARISMA_MODIFIER)).addObserver(this);
    }

    private void setFieldsEnabled(boolean flag) {
        txtStrScore.setEnabled(flag);
        txtStrMod.setEnabled(flag);
        txtConScore.setEnabled(flag);
        txtConMod.setEnabled(flag);
        txtDexScore.setEnabled(flag);
        txtDexMod.setEnabled(flag);
        txtIntScore.setEnabled(flag);
        txtIntMod.setEnabled(flag);
        txtWisScore.setEnabled(flag);
        txtWisMod.setEnabled(flag);
        txtChaScore.setEnabled(flag);
        txtChaMod.setEnabled(flag);
    }

    private void setFieldText(String text) {
        txtStrScore.setText(text);
        txtStrMod.setText(text);
        txtConScore.setText(text);
        txtConMod.setText(text);
        txtDexScore.setText(text);
        txtDexMod.setText(text);
        txtIntScore.setText(text);
        txtIntMod.setText(text);
        txtWisScore.setText(text);
        txtWisMod.setText(text);
        txtChaScore.setText(text);
        txtChaMod.setText(text);
    }

    private void userSetAbilityProperty(JTextComponent field, String propertySlug) {
        if (avatar == null) {
            field.setText("?");
        } else {
            ((AbstractProperty<Integer>) avatar.<Integer>find(propertySlug)).
                    setValue(Integer.parseInt(field.getText()));
            field.setToolTipText("User Defined Value");
            field.transferFocus();
        }
    }
    
    private void fieldFocusLoss(JTextComponent field, String propertySlug) {
        if (avatar == null) {
            field.setText("?");
        } else {
            IProperty<Integer> property = avatar.<Integer>find(propertySlug);
            Integer textValue = Integer.parseInt(field.getText());
            Integer propertyValue = property.getValue();
            int compareResult = textValue.compareTo(propertyValue);
            if (compareResult!=0) {
                ((AbstractProperty<Integer>) property).setValue(textValue);
                field.setToolTipText("User Defined Value");
            } else {
                field.setToolTipText(null);
            }
        }
    }
    
    @Override
    public void update(Observable o, Object arg) {
        @SuppressWarnings("unchecked")
        Set<String> aliases = (Set<String>) arg;
        
        @SuppressWarnings("unchecked")
        AbstractProperty<Integer> property = (AbstractProperty<Integer>) o;
        JTextComponent field;

        if      (aliases.contains(AbilityScoreProperty.SLUG.STRENGTH_SCORE))       field = txtStrScore;
        else if (aliases.contains(AbilityScoreProperty.SLUG.CONSTITUTION_SCORE))   field = txtConScore;
        else if (aliases.contains(AbilityScoreProperty.SLUG.DEXTERITY_SCORE))      field = txtDexScore;
        else if (aliases.contains(AbilityScoreProperty.SLUG.INTELLIGENCE_SCORE))   field = txtIntScore;
        else if (aliases.contains(AbilityScoreProperty.SLUG.WISDOM_SCORE))         field = txtWisScore;
        else if (aliases.contains(AbilityScoreProperty.SLUG.CHARISMA_SCORE))       field = txtChaScore;
        else if (aliases.contains(AbilityModifierProperty.SLUG.STRENGTH_MODIFIER))       field = txtStrMod;
        else if (aliases.contains(AbilityModifierProperty.SLUG.CONSTITUTION_MODIFIER))   field = txtConMod;
        else if (aliases.contains(AbilityModifierProperty.SLUG.DEXTERITY_MODIFIER))      field = txtDexMod;
        else if (aliases.contains(AbilityModifierProperty.SLUG.INTELLIGENCE_MODIFIER))   field = txtIntMod;
        else if (aliases.contains(AbilityModifierProperty.SLUG.WISDOM_MODIFIER))         field = txtWisMod;
        else if (aliases.contains(AbilityModifierProperty.SLUG.CHARISMA_MODIFIER))       field = txtChaMod;
        else
            field = null;

        if (field!=null) updateAbilityProperty(property, field);
    }
}
