/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sizzle.dd.core.ui.windows;

import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import javax.swing.text.JTextComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.Notification;
import org.openide.awt.NotificationDisplayer;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.sizzle.dd.core.Avatar;
import org.sizzle.dd.core.properties.CoreProperty;
import org.sizzle.dd.core.properties.ExperienceProperty;
import org.sizzle.dd.core.properties.LevelProperty;
import org.sizzle.dd.core.properties.NameProperty;
import org.sizzle.dd.core.properties.PlayerNameProperty;
import org.sizzle.rpg.core.AbstractProperty;
import org.sizzle.rpg.core.IProperty;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
				dtd = "-//org.sizzle.dd.core.ui.windows//BasicInformation//EN",
				autostore = false)
@TopComponent.Description(
				preferredID = "BasicInformationTopComponent",
				iconBase = "org/sizzle/dd/core/ui/windows/user-silhouette-question.png",
				persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.sizzle.dd.core.ui.windows.BasicInformationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
				displayName = "#CTL_BasicInformationAction",
				preferredID = "BasicInformationTopComponent")
@Messages({
	"CTL_BasicInformationAction=BasicInformation",
	"CTL_BasicInformationTopComponent=BasicInformation Window",
	"HINT_BasicInformationTopComponent=This is a BasicInformation window"
})
public final class BasicInformationTopComponent extends TopComponent implements Observer {
	private Avatar avatar;

	public BasicInformationTopComponent() {
		initComponents();
		setName(Bundle.CTL_BasicInformationTopComponent());
		setToolTipText(Bundle.HINT_BasicInformationTopComponent());

	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    txtPlayerName = new javax.swing.JTextField();
    txtCharacterName = new javax.swing.JTextField();
    txtLevel = new javax.swing.JTextField();
    txtExperience = new javax.swing.JTextField();
    lblPlayerName = new javax.swing.JLabel();
    lblLevel = new javax.swing.JLabel();
    txtAge = new javax.swing.JTextField();
    txtHeight = new javax.swing.JTextField();
    txtWeight = new javax.swing.JTextField();
    txtSize = new javax.swing.JTextField();
    lblAge = new javax.swing.JLabel();
    lblHeight = new javax.swing.JLabel();
    lblWeight = new javax.swing.JLabel();
    lblSize = new javax.swing.JLabel();
    lblExperience = new javax.swing.JLabel();

    txtPlayerName.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtPlayerName.text")); // NOI18N
    txtPlayerName.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtPlayerNameActionPerformed(evt);
      }
    });
    txtPlayerName.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtPlayerNameFocusLost(evt);
      }
    });

    txtCharacterName.setFont(txtCharacterName.getFont().deriveFont(txtCharacterName.getFont().getStyle() | java.awt.Font.BOLD, txtCharacterName.getFont().getSize()+6));
    txtCharacterName.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtCharacterName.text")); // NOI18N
    txtCharacterName.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtCharacterNameActionPerformed(evt);
      }
    });
    txtCharacterName.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtCharacterNameFocusLost(evt);
      }
    });

    txtLevel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtLevel.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtLevel.text")); // NOI18N
    txtLevel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtLevelActionPerformed(evt);
      }
    });
    txtLevel.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtLevelFocusLost(evt);
      }
    });

    txtExperience.setFont(txtExperience.getFont().deriveFont((txtExperience.getFont().getStyle() | java.awt.Font.ITALIC), txtExperience.getFont().getSize()+4));
    txtExperience.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtExperience.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtExperience.text")); // NOI18N
    txtExperience.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtExperienceActionPerformed(evt);
      }
    });
    txtExperience.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtExperienceFocusLost(evt);
      }
    });

    lblPlayerName.setFont(lblPlayerName.getFont().deriveFont(lblPlayerName.getFont().getSize()-2f));
    org.openide.awt.Mnemonics.setLocalizedText(lblPlayerName, org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.lblPlayerName.text")); // NOI18N

    lblLevel.setFont(lblLevel.getFont().deriveFont(lblLevel.getFont().getSize()-2f));
    org.openide.awt.Mnemonics.setLocalizedText(lblLevel, org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.lblLevel.text")); // NOI18N

    txtAge.setFont(txtAge.getFont().deriveFont(txtAge.getFont().getSize()-1f));
    txtAge.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtAge.text")); // NOI18N
    txtAge.setPreferredSize(new java.awt.Dimension(50, 19));
    txtAge.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtAgeActionPerformed(evt);
      }
    });
    txtAge.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtAgeFocusLost(evt);
      }
    });

    txtHeight.setFont(txtHeight.getFont().deriveFont(txtHeight.getFont().getSize()-1f));
    txtHeight.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtHeight.text")); // NOI18N
    txtHeight.setPreferredSize(new java.awt.Dimension(50, 19));
    txtHeight.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtHeightActionPerformed(evt);
      }
    });
    txtHeight.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtHeightFocusLost(evt);
      }
    });

    txtWeight.setFont(txtWeight.getFont().deriveFont(txtWeight.getFont().getSize()-1f));
    txtWeight.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtWeight.text")); // NOI18N
    txtWeight.setPreferredSize(new java.awt.Dimension(50, 19));
    txtWeight.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtWeightActionPerformed(evt);
      }
    });
    txtWeight.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtWeightFocusLost(evt);
      }
    });

    txtSize.setFont(txtSize.getFont().deriveFont(txtSize.getFont().getSize()-1f));
    txtSize.setText(org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.txtSize.text")); // NOI18N
    txtSize.setPreferredSize(new java.awt.Dimension(50, 19));
    txtSize.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtSizeActionPerformed(evt);
      }
    });
    txtSize.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtSizeFocusLost(evt);
      }
    });

    lblAge.setFont(lblAge.getFont().deriveFont(lblAge.getFont().getSize()-2f));
    org.openide.awt.Mnemonics.setLocalizedText(lblAge, org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.lblAge.text")); // NOI18N

    lblHeight.setFont(lblHeight.getFont().deriveFont(lblHeight.getFont().getSize()-2f));
    org.openide.awt.Mnemonics.setLocalizedText(lblHeight, org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.lblHeight.text")); // NOI18N

    lblWeight.setFont(lblWeight.getFont().deriveFont(lblWeight.getFont().getSize()-2f));
    org.openide.awt.Mnemonics.setLocalizedText(lblWeight, org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.lblWeight.text")); // NOI18N

    lblSize.setFont(lblSize.getFont().deriveFont(lblSize.getFont().getSize()-2f));
    org.openide.awt.Mnemonics.setLocalizedText(lblSize, org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.lblSize.text")); // NOI18N

    lblExperience.setFont(lblExperience.getFont().deriveFont(lblExperience.getFont().getSize()-2f));
    org.openide.awt.Mnemonics.setLocalizedText(lblExperience, org.openide.util.NbBundle.getMessage(BasicInformationTopComponent.class, "BasicInformationTopComponent.lblExperience.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(lblPlayerName)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(txtLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(txtCharacterName)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(lblAge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(lblHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(lblWeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(lblSize)
                  .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 14, Short.MAX_VALUE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblLevel, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(txtExperience, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(lblExperience, javax.swing.GroupLayout.Alignment.TRAILING))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(txtLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblPlayerName)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(lblLevel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtExperience, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(txtCharacterName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(lblAge)
            .addComponent(lblHeight)
            .addComponent(lblWeight)
            .addComponent(lblSize))
          .addComponent(lblExperience))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void txtCharacterNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCharacterNameActionPerformed
    this.userSetAbilityProperty(txtCharacterName, txtCharacterName.getText(), avatar.find(NameProperty.class));
  }//GEN-LAST:event_txtCharacterNameActionPerformed

  private void txtPlayerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlayerNameActionPerformed
    this.userSetAbilityProperty(txtPlayerName, txtPlayerName.getText(), avatar.find(PlayerNameProperty.class));
  }//GEN-LAST:event_txtPlayerNameActionPerformed

  private void txtExperienceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExperienceActionPerformed
    Integer attemptedValue, value = avatar.findValueOf(ExperienceProperty.class);
		try {
			attemptedValue = Integer.parseInt(txtExperience.getText());
			if (attemptedValue > 0)
				NotificationDisplayer.getDefault().notify("Invalid Data Type", null, "Experience must be a positive number", null);
		} catch (NumberFormatException nfe) {
			Exceptions.attachSeverity(nfe, Level.OFF);
			NotificationDisplayer.getDefault().notify("Invalid Data Type", null, "Experience must be a whole number", null);
		}
		this.userSetAbilityProperty(txtExperience, value, avatar.find(ExperienceProperty.class));
  }//GEN-LAST:event_txtExperienceActionPerformed

  private void txtLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLevelActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_txtLevelActionPerformed

  private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_txtAgeActionPerformed

  private void txtHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHeightActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_txtHeightActionPerformed

  private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_txtWeightActionPerformed

  private void txtSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSizeActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_txtSizeActionPerformed

  private void txtCharacterNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCharacterNameFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtCharacterNameFocusLost

  private void txtPlayerNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlayerNameFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtPlayerNameFocusLost

  private void txtExperienceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExperienceFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtExperienceFocusLost

  private void txtLevelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLevelFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtLevelFocusLost

  private void txtAgeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgeFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtAgeFocusLost

  private void txtHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHeightFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtHeightFocusLost

  private void txtWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWeightFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtWeightFocusLost

  private void txtSizeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSizeFocusLost
    // TODO add your handling code here:
  }//GEN-LAST:event_txtSizeFocusLost

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel lblAge;
  private javax.swing.JLabel lblExperience;
  private javax.swing.JLabel lblHeight;
  private javax.swing.JLabel lblLevel;
  private javax.swing.JLabel lblPlayerName;
  private javax.swing.JLabel lblSize;
  private javax.swing.JLabel lblWeight;
  private javax.swing.JTextField txtAge;
  private javax.swing.JTextField txtCharacterName;
  private javax.swing.JTextField txtExperience;
  private javax.swing.JTextField txtHeight;
  private javax.swing.JTextField txtLevel;
  private javax.swing.JTextField txtPlayerName;
  private javax.swing.JTextField txtSize;
  private javax.swing.JTextField txtWeight;
  // End of variables declaration//GEN-END:variables

	@Override
	public void componentOpened() {
		avatar = Lookup.getDefault().lookup(Avatar.class);
		
		// add this topcomponent as an observer to the avatar's properties
		if (avatar.hasProperty(LevelProperty.SLUG)) avatar.find(LevelProperty.class).addObserver(this);
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	public void update(Observable o, Object arg) {
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	private <T> void userSetAbilityProperty(JTextComponent field, T value, CoreProperty<T> property) {
		if (null == avatar) {
			field.setText("?");
		} else {
			property.setValue(value);
			field.setToolTipText("User Defined Value");
			field.transferFocus();
		}
	}
	private void userSetAbilityProperty(JTextComponent field, String propertySlug) {
		if (avatar == null) {
			field.setText("?");
		} else {
			((AbstractProperty<Integer>) avatar.<Integer>find(propertySlug)).
							setValue(Integer.parseInt(field.getText()));
			field.setToolTipText("User Defined Value");
			field.transferFocus();
		}
	}

	private void fieldFocusLoss(JTextComponent field, String propertySlug) {
		if (avatar == null || !avatar.hasProperty(propertySlug)) {
			field.setText("?");
		} else {
			IProperty<Integer> property = avatar.<Integer>find(propertySlug);
			Integer textValue = field.getText().matches("(-)?\\d*")
							? Integer.parseInt(field.getText())
							: 0;

			Integer propertyValue = property.getValue();
			int compareResult = textValue.compareTo(propertyValue);
			if (compareResult != 0) {
				((AbstractProperty<Integer>) property).setValue(textValue);
				field.setToolTipText("User Defined Value");
			} else {
				field.setToolTipText(null);
			}
		}
	}
}
