/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sizzle.dd.core.ui.windows;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.JPopupMenu;
import javax.swing.text.JTextComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.sizzle.dd.core.Avatar;
import org.sizzle.dd.core.properties.ArmorClassProperty;
import org.sizzle.dd.core.properties.FortitudeProperty;
import org.sizzle.rpg.core.AbstractAvatar;
import org.sizzle.rpg.core.AbstractProperty;
import org.sizzle.rpg.core.IProperty;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
				dtd = "-//org.sizzle.dd.core.ui.windows//Defenses//EN",
				autostore = false)
@TopComponent.Description(
				preferredID = "DefensesTopComponent",
				iconBase = "org/sizzle/dd/core/ui/windows/shield.png",
				persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.sizzle.dd.core.ui.windows.DefensesTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
				displayName = "#CTL_DefensesAction",
				preferredID = "DefensesTopComponent")
@Messages({
	"CTL_DefensesAction=Defenses",
	"CTL_DefensesTopComponent=Defenses Window",
	"HINT_DefensesTopComponent=This is a Defenses window"
})
public final class DefensesTopComponent extends TopComponent implements LookupListener, Observer {

	private Lookup.Result<AbstractAvatar> avatarResult = null;
	private Avatar avatar;

	public DefensesTopComponent() {
		initComponents();
		setName(Bundle.CTL_DefensesTopComponent());
//        setToolTipText(Bundle.HINT_DefensesTopComponent());

	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    pnlArmorClass = new javax.swing.JPanel();
    lblArmorClass = new javax.swing.JLabel();
    txtArmorClass = new javax.swing.JTextField();
    pnlFortitude = new javax.swing.JPanel();
    lblFortitude = new javax.swing.JLabel();
    txtFortitude = new javax.swing.JTextField();
    pnlReflex = new javax.swing.JPanel();
    lblReflex = new javax.swing.JLabel();
    txtReflex = new javax.swing.JTextField();
    pnlWill = new javax.swing.JPanel();
    lblWill = new javax.swing.JLabel();
    txtWill = new javax.swing.JTextField();
    pnlConditionalDefenseBonuses = new javax.swing.JPanel();
    lblConditionalDefenseBonuses = new javax.swing.JLabel();
    scpConditionalDefenseBonuses = new javax.swing.JScrollPane();
    txpConditionalDefenseBonuses = new javax.swing.JTextPane();

    setLayout(new java.awt.GridBagLayout());

    pnlArmorClass.setBackground(new java.awt.Color(160, 160, 160));
    pnlArmorClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    pnlArmorClass.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(lblArmorClass, org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.lblArmorClass.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 4, 0);
    pnlArmorClass.add(lblArmorClass, gridBagConstraints);

    txtArmorClass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    txtArmorClass.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtArmorClass.setText(org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.jTextField4.text")); // NOI18N
    txtArmorClass.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2))));
    txtArmorClass.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtArmorClassActionPerformed(evt);
      }
    });
    txtArmorClass.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtArmorClassFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.1;
    pnlArmorClass.add(txtArmorClass, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.25;
    gridBagConstraints.weighty = 5.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
    add(pnlArmorClass, gridBagConstraints);

    pnlFortitude.setBackground(new java.awt.Color(160, 160, 160));
    pnlFortitude.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    pnlFortitude.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(lblFortitude, org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.lblFortitude.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 4, 0);
    pnlFortitude.add(lblFortitude, gridBagConstraints);

    txtFortitude.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    txtFortitude.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtFortitude.setText(org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.jTextField4.text")); // NOI18N
    txtFortitude.setToolTipText(org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.txtFortitude.toolTipText")); // NOI18N
    txtFortitude.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2))));
    txtFortitude.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtFortitudeActionPerformed(evt);
      }
    });
    txtFortitude.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtFortitudeFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.1;
    pnlFortitude.add(txtFortitude, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.25;
    gridBagConstraints.weighty = 5.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
    add(pnlFortitude, gridBagConstraints);

    pnlReflex.setBackground(new java.awt.Color(160, 160, 160));
    pnlReflex.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    pnlReflex.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(lblReflex, org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.lblReflex.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 4, 0);
    pnlReflex.add(lblReflex, gridBagConstraints);

    txtReflex.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    txtReflex.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtReflex.setText(org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.jTextField4.text")); // NOI18N
    txtReflex.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2))));
    txtReflex.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtReflexActionPerformed(evt);
      }
    });
    txtReflex.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtReflexFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.1;
    pnlReflex.add(txtReflex, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.25;
    gridBagConstraints.weighty = 5.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
    add(pnlReflex, gridBagConstraints);

    pnlWill.setBackground(new java.awt.Color(160, 160, 160));
    pnlWill.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    pnlWill.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(lblWill, org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.lblWill.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 4, 0);
    pnlWill.add(lblWill, gridBagConstraints);

    txtWill.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    txtWill.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    txtWill.setText(org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.txtWill.text")); // NOI18N
    txtWill.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2))));
    txtWill.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtWillActionPerformed(evt);
      }
    });
    txtWill.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        txtWillFocusLost(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.1;
    pnlWill.add(txtWill, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.25;
    gridBagConstraints.weighty = 5.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
    add(pnlWill, gridBagConstraints);

    pnlConditionalDefenseBonuses.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(lblConditionalDefenseBonuses, org.openide.util.NbBundle.getMessage(DefensesTopComponent.class, "DefensesTopComponent.lblConditionalDefenseBonuses.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 2.5;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
    pnlConditionalDefenseBonuses.add(lblConditionalDefenseBonuses, gridBagConstraints);

    scpConditionalDefenseBonuses.setViewportView(txpConditionalDefenseBonuses);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 2.5;
    pnlConditionalDefenseBonuses.add(scpConditionalDefenseBonuses, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 5.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
    add(pnlConditionalDefenseBonuses, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void txtArmorClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtArmorClassActionPerformed
		userSetProperty(txtArmorClass, ArmorClassProperty.SLUG);
  }//GEN-LAST:event_txtArmorClassActionPerformed

  private void txtFortitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFortitudeActionPerformed
		// TODO add your handling code here:
  }//GEN-LAST:event_txtFortitudeActionPerformed

  private void txtReflexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReflexActionPerformed
		// TODO add your handling code here:
  }//GEN-LAST:event_txtReflexActionPerformed

  private void txtWillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWillActionPerformed
		// TODO add your handling code here:
  }//GEN-LAST:event_txtWillActionPerformed

  private void txtArmorClassFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArmorClassFocusLost
		fieldFocusLoss(txtArmorClass, ArmorClassProperty.SLUG);
  }//GEN-LAST:event_txtArmorClassFocusLost

  private void txtFortitudeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFortitudeFocusLost
		// TODO add your handling code here:
  }//GEN-LAST:event_txtFortitudeFocusLost

  private void txtReflexFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReflexFocusLost
		// TODO add your handling code here:
  }//GEN-LAST:event_txtReflexFocusLost

  private void txtWillFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWillFocusLost
		// TODO add your handling code here:
  }//GEN-LAST:event_txtWillFocusLost
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel lblArmorClass;
  private javax.swing.JLabel lblConditionalDefenseBonuses;
  private javax.swing.JLabel lblFortitude;
  private javax.swing.JLabel lblReflex;
  private javax.swing.JLabel lblWill;
  private javax.swing.JPanel pnlArmorClass;
  private javax.swing.JPanel pnlConditionalDefenseBonuses;
  private javax.swing.JPanel pnlFortitude;
  private javax.swing.JPanel pnlReflex;
  private javax.swing.JPanel pnlWill;
  private javax.swing.JScrollPane scpConditionalDefenseBonuses;
  private javax.swing.JTextPane txpConditionalDefenseBonuses;
  private javax.swing.JTextField txtArmorClass;
  private javax.swing.JTextField txtFortitude;
  private javax.swing.JTextField txtReflex;
  private javax.swing.JTextField txtWill;
  // End of variables declaration//GEN-END:variables

	@Override
	public void componentOpened() {
		avatarResult = Lookup.getDefault().lookupResult(AbstractAvatar.class);
		avatarResult.addLookupListener(this);
		LookupEvent initialLookupEventOnComponentOpen = new LookupEvent(avatarResult);
		resultChanged(initialLookupEventOnComponentOpen);
	}

	@Override
	public void componentClosed() {
		avatarResult.removeLookupListener(this);
		avatarResult = null;
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	public void configure(Avatar _avatar) {
		avatar = Lookup.getDefault().lookup(Avatar.class);

		if (avatar.hasProperty(ArmorClassProperty.SLUG)) {
			ArmorClassProperty.class.cast(avatar.find(ArmorClassProperty.SLUG)).addObserver(this);
		}
		if (avatar.hasProperty(FortitudeProperty.SLUG)) {
			FortitudeProperty.class.cast(avatar.find(FortitudeProperty.SLUG)).addObserver(this);
		}
//		if (avatar.hasProperty(ArmorClassProperty.SLUG)) {
//			ArmorClassProperty.class.cast(avatar.find(ArmorClassProperty.SLUG)).addObserver(this);
//		}
//		if (avatar.hasProperty(ArmorClassProperty.SLUG)) {
//			ArmorClassProperty.class.cast(avatar.find(ArmorClassProperty.SLUG)).addObserver(this);
//		}

	}

	@Override
	public void resultChanged(LookupEvent ev) {
		Object src = ev.getSource();
		if (src == null) {
			throw new NullPointerException("The source is null");
		}
		if (avatarResult == null) {
			throw new NullPointerException("The avatarResult is null");
		}

		if (src.getClass().isAssignableFrom(avatarResult.getClass())) {
			// avatar has changed, so we must update our property Lookup.Results
			@SuppressWarnings("unchecked")
			Lookup.Result<Avatar> r = (Lookup.Result<Avatar>) ev.getSource();
			Iterator<? extends Avatar> avatarIterator = r.allInstances().iterator();
			avatar = avatarIterator.hasNext() ? avatarIterator.next() : null;
			resetDefenseResults(avatar);
			configure(avatar);
		}
	}

	@Override
	public void update(Observable o, Object arg) {
		@SuppressWarnings("unchecked")
		Set<String> aliases = (Set<String>) arg;

		@SuppressWarnings("unchecked")
		AbstractProperty<Integer> property = (AbstractProperty<Integer>) o;

		JTextComponent field;

		if (aliases.contains(ArmorClassProperty.SLUG)) {
			field = txtArmorClass;
		} else if (aliases.contains(FortitudeProperty.SLUG)) {
			field = txtFortitude;
		} else {
			field = null;
		}

		if (field != null) {
			updateProperty(property, field);
		}
	}

	private void resetDefenseResults(Avatar _avatar) {
		if (null == _avatar) {
			setFieldText("?");
			setFieldsEnabled(false);
		} else {
			JTextComponent field;
			IProperty<Integer> defenseProperty;
			if (_avatar.hasProperty(ArmorClassProperty.SLUG)) {
				defenseProperty = _avatar.find(ArmorClassProperty.SLUG);
				field = txtArmorClass;
			} else if (_avatar.hasProperty(FortitudeProperty.SLUG)) {
				defenseProperty = _avatar.find(FortitudeProperty.SLUG);
				field = txtFortitude;
			} else {
				defenseProperty = null;
				field = null;
			}
			if (field!=null) updateProperty(defenseProperty, field);
		}
	}

    private void setFieldsEnabled(boolean flag) {
        txtArmorClass.setEnabled(flag);
        txtFortitude.setEnabled(flag);
        txtReflex.setEnabled(flag);
        txtWill.setEnabled(flag);
        txpConditionalDefenseBonuses.setEnabled(flag);
    }

    private void setFieldText(String text) {
        txtArmorClass.setText(text);
        txtFortitude.setText(text);
        txtReflex.setText(text);
        txtWill.setText(text);
        txpConditionalDefenseBonuses.setText(text);
    }

	private void updateProperty(final IProperty<Integer> property, final JTextComponent component) {
		EventQueue.invokeLater(new Runnable() {
//
			@Override
			public void run() {
				if (property.isUserSet()) {
					System.out.println("User overriding a property value");
					JPopupMenu pop = new JPopupMenu();
					pop.add(new AbstractAction("Clear User Value") {
						@Override
						public void actionPerformed(ActionEvent e) {
							((AbstractProperty<Integer>) property).unsetValue();
						}
					});
					component.setComponentPopupMenu(pop);
					component.setBackground(Color.GREEN);
				} else {
					component.setComponentPopupMenu(null);
					component.setBackground(Color.WHITE);
				}
				component.setText(property.getValue().toString());
			}
		});
	}

	private void userSetProperty(JTextComponent field, String propertySlug) {
		if (avatar == null) {
			field.setText("?");
		} else {
			((AbstractProperty<Integer>) avatar.<Integer>find(propertySlug)).
							setValue(Integer.parseInt(field.getText()));
			field.setToolTipText("User Defined Value");
			field.transferFocus();
		}
	}

	private void fieldFocusLoss(JTextComponent field, String propertySlug) {
		if (avatar == null || !avatar.hasProperty(propertySlug)) {
			field.setText("?");
		} else {
			IProperty<Integer> property = avatar.<Integer>find(propertySlug);
			Integer textValue = field.getText().matches("\\d*")
							? Integer.parseInt(field.getText())
							: 0;

			Integer propertyValue = property.getValue();
			int compareResult = textValue.compareTo(propertyValue);
			if (compareResult != 0) {
				((AbstractProperty<Integer>) property).setValue(textValue);
				field.setToolTipText("User Defined Value");
			} else {
				field.setToolTipText(null);
			}
		}
	}
}
